using System.Diagnostics;

//namespaces help us logically arrange our program, it's similar to a package in java
//importing namespace is like importing a package in java, the class Program below
//belongs to the namespace csharp_sandbox like how a class belongs to a package in java
namespace CsharpSandbox
{
    internal class Program1 : Program4Parent
    {
        //fields belongs to class Program1, good oop review lol
        string name;
        string lastName;

        //default constructor (autogenerated so you dont need to declare if you dont wanna)
        public Program1() { }

        //constructor with name arg
        public Program1(string name) {this.name = name;}

        //constructor with name and lastname args, but no assignment for name
        //so you need to do this.name=name OR : this(name)    <-- neat
        public Program1(string name, string lastName) : this(name)
        {
            //this.name = name;
            this.lastName = lastName;
        }

        public void getName()
        {
            Console.WriteLine("my name is: " + this.name);
        }


        //method getData belongs to class Program1
        public void getData()
        {
            Console.WriteLine("i am inside the getData() method from Program1");
        }

        //solutions or sln files are just containers that hold multiple projects
        //static void Main is the program's entry point just like java's psvm, but a csharp
        //program can only have 1 entry point, so when you run the program it builds or compiles 
        //your program and finds the entry point and runs it from there
        static void Main(string[] args)
        {
            //namespace.class.method, or if you imported the namespace you can just do
            //class.method. in csharp an import is called "using"
            System.Console.WriteLine("Hello, World!");

            //same as above
            Console.WriteLine("Hello, World! with no namespace");

            int a = 4;
            Console.WriteLine("number is: " + a);

            string name = "shy guy";
            //2nd way is modern way of writing this statement
            Console.WriteLine("name is: " + name);
            Console.WriteLine($"name is: {name}");

            //var keyword like it javascript, where you don't know what type the variable is at runtime
            var age = 23;
            Console.WriteLine($"age is: {age}");
            //age = "hello";      once you assign age to a type you can't reassign later

            //dynamic keyword is like var, but you can reassign the type later
            dynamic height = 65.5;
            Console.WriteLine($"height is {height}, a double");

            height = "now a string lol";
            Console.WriteLine($"height is {height}");

            Program1 p = new Program1();
            p.getData();
            //getData(); can't call nonstatic method without instantiating the class it belongs too, can call static method without instantiating the class 

            p.setData();

            Program1 p2Named = new Program1("MY NAME - tyler");
            p2Named.getName();

            Program1 p3LastNamed = new Program1("firstname", "lastname");
            p3LastNamed.getName();
        }

        
    }
}